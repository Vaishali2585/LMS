{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "340055f3-6db4-47b8-b9e6-232a87a7348d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fd486bc3-1b99-45bf-ba83-5600fa137b7a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_bill</th>\n",
       "      <th>tip</th>\n",
       "      <th>sex</th>\n",
       "      <th>smoker</th>\n",
       "      <th>day</th>\n",
       "      <th>time</th>\n",
       "      <th>size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>16.99</td>\n",
       "      <td>1.01</td>\n",
       "      <td>Female</td>\n",
       "      <td>No</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10.34</td>\n",
       "      <td>1.66</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>21.01</td>\n",
       "      <td>3.50</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>23.68</td>\n",
       "      <td>3.31</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>24.59</td>\n",
       "      <td>3.61</td>\n",
       "      <td>Female</td>\n",
       "      <td>No</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>239</th>\n",
       "      <td>29.03</td>\n",
       "      <td>5.92</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>Sat</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>240</th>\n",
       "      <td>27.18</td>\n",
       "      <td>2.00</td>\n",
       "      <td>Female</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Sat</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>241</th>\n",
       "      <td>22.67</td>\n",
       "      <td>2.00</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Sat</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242</th>\n",
       "      <td>17.82</td>\n",
       "      <td>1.75</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>Sat</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>243</th>\n",
       "      <td>18.78</td>\n",
       "      <td>3.00</td>\n",
       "      <td>Female</td>\n",
       "      <td>No</td>\n",
       "      <td>Thur</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>244 rows Ã— 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     total_bill   tip     sex smoker   day    time  size\n",
       "0         16.99  1.01  Female     No   Sun  Dinner     2\n",
       "1         10.34  1.66    Male     No   Sun  Dinner     3\n",
       "2         21.01  3.50    Male     No   Sun  Dinner     3\n",
       "3         23.68  3.31    Male     No   Sun  Dinner     2\n",
       "4         24.59  3.61  Female     No   Sun  Dinner     4\n",
       "..          ...   ...     ...    ...   ...     ...   ...\n",
       "239       29.03  5.92    Male     No   Sat  Dinner     3\n",
       "240       27.18  2.00  Female    Yes   Sat  Dinner     2\n",
       "241       22.67  2.00    Male    Yes   Sat  Dinner     2\n",
       "242       17.82  1.75    Male     No   Sat  Dinner     2\n",
       "243       18.78  3.00  Female     No  Thur  Dinner     2\n",
       "\n",
       "[244 rows x 7 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=sns.load_dataset('tips')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d627f057-7c15-4417-bd9f-a7e6761d555a",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "lb=LabelEncoder()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "42cf25de-3627-44b3-a440-c7aaa8fd2d32",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['smoker']=lb.fit_transform(df['smoker'])\n",
    "df['sex']=lb.fit_transform(df['sex'])\n",
    "df['time']=lb.fit_transform(df['time'])\n",
    "df['day']=lb.fit_transform(df['day'])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e8fdf9e1-d28f-4050-928a-6d23efb61c44",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "total_bill    float64\n",
       "tip           float64\n",
       "sex             int32\n",
       "smoker          int32\n",
       "day             int32\n",
       "time            int32\n",
       "size            int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8cbb6092-3739-42b9-b4c6-e80a32bfe580",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_bill</th>\n",
       "      <th>tip</th>\n",
       "      <th>sex</th>\n",
       "      <th>smoker</th>\n",
       "      <th>day</th>\n",
       "      <th>time</th>\n",
       "      <th>size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>16.99</td>\n",
       "      <td>1.01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10.34</td>\n",
       "      <td>1.66</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   total_bill   tip  sex  smoker  day  time  size\n",
       "0       16.99  1.01    0       0    2     0     2\n",
       "1       10.34  1.66    1       0    2     0     3"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "16da9432-368e-4419-88b4-99e2503c481e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_bill</th>\n",
       "      <th>tip</th>\n",
       "      <th>sex</th>\n",
       "      <th>smoker</th>\n",
       "      <th>day</th>\n",
       "      <th>time</th>\n",
       "      <th>size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>total_bill</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.675734</td>\n",
       "      <td>0.144877</td>\n",
       "      <td>0.085721</td>\n",
       "      <td>-0.043550</td>\n",
       "      <td>-0.183118</td>\n",
       "      <td>0.598315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tip</th>\n",
       "      <td>0.675734</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.088862</td>\n",
       "      <td>0.005929</td>\n",
       "      <td>-0.011548</td>\n",
       "      <td>-0.121629</td>\n",
       "      <td>0.489299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sex</th>\n",
       "      <td>0.144877</td>\n",
       "      <td>0.088862</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.002816</td>\n",
       "      <td>-0.078292</td>\n",
       "      <td>-0.205231</td>\n",
       "      <td>0.086195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>smoker</th>\n",
       "      <td>0.085721</td>\n",
       "      <td>0.005929</td>\n",
       "      <td>0.002816</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.282721</td>\n",
       "      <td>-0.054921</td>\n",
       "      <td>-0.133178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>day</th>\n",
       "      <td>-0.043550</td>\n",
       "      <td>-0.011548</td>\n",
       "      <td>-0.078292</td>\n",
       "      <td>-0.282721</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.638019</td>\n",
       "      <td>0.069510</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <td>-0.183118</td>\n",
       "      <td>-0.121629</td>\n",
       "      <td>-0.205231</td>\n",
       "      <td>-0.054921</td>\n",
       "      <td>0.638019</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.103411</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>size</th>\n",
       "      <td>0.598315</td>\n",
       "      <td>0.489299</td>\n",
       "      <td>0.086195</td>\n",
       "      <td>-0.133178</td>\n",
       "      <td>0.069510</td>\n",
       "      <td>-0.103411</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            total_bill       tip       sex    smoker       day      time  \\\n",
       "total_bill    1.000000  0.675734  0.144877  0.085721 -0.043550 -0.183118   \n",
       "tip           0.675734  1.000000  0.088862  0.005929 -0.011548 -0.121629   \n",
       "sex           0.144877  0.088862  1.000000  0.002816 -0.078292 -0.205231   \n",
       "smoker        0.085721  0.005929  0.002816  1.000000 -0.282721 -0.054921   \n",
       "day          -0.043550 -0.011548 -0.078292 -0.282721  1.000000  0.638019   \n",
       "time         -0.183118 -0.121629 -0.205231 -0.054921  0.638019  1.000000   \n",
       "size          0.598315  0.489299  0.086195 -0.133178  0.069510 -0.103411   \n",
       "\n",
       "                size  \n",
       "total_bill  0.598315  \n",
       "tip         0.489299  \n",
       "sex         0.086195  \n",
       "smoker     -0.133178  \n",
       "day         0.069510  \n",
       "time       -0.103411  \n",
       "size        1.000000  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "8d4ed7eb-351e-4bb5-95d4-bc218a82781e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "sns.heatmap(np.abs(df.corr()),cmap='Blues')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9f697e10-641a-4e4a-9fe3-d83867bc05d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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RLo4Z4CIiEjhOGeAiIiIlISVASIiIl0cJiAiIlI4hU0gVFbqQ0RERNWwMkBERKSLwwREREQKx7sJiIiISElYGSAiItLFYQIiIiKF490EREREpCSsDBAREemyUNbfykwGiIiIdClsmIDJABERkS6FTSBU1tUSERFRNawMEBER6eIwARERkcIpbAKhsq6WiIiIqmFlgIiISJfChgkkVwbOnz+PmTNn4uWXX0ZxcTEAYMeOHTh58qRswREREZmEykK+zQxIijItLQ3du3fHoUOHkJKSgjt37gAAjh8/jjlz5sgaIBERERmWpGTgvffew7x585CamgobGxtN+zPPPIMDBw7IFhwREZFJqFTybWZA0pyBEydO4Ntvv63W3qJFC1y7dq3eQREREZmUmZT35SLpal1cXFBYWFitPTs7G61bt653UERERGQ8kpKBsWPHYsaMGSgqKoJKpUJVVRXS09MRHR2NsLAwuWMkIiIyLguVfJsZkJQMzJ8/H23atEHr1q1x584ddOnSBf369UNQUBBmzpwpd4xERETGpbC7CSTNGbC2tsb69esxd+5cZGdno6qqCr169cKf/vQnueMjIiIyPjOZ+CeXei061L59e7Rv316uWIiIiMgEJCUDQghs2rQJe/bsQXFxMaqqqrS+n5KSIktwREREJmEm5X25SEoG3nrrLaxYsQLPPPMM3N3doVJYOYWIiBo3pX2uSUoG1q1bh5SUFAwdOlTSScvKylBWVqbVpq4sg1qtltQfERERSSepDuLs7Ix27dpJPmlsbCycnZ21ttgv4iT3R0REJCuF3U2gEkKIuh6UnJyMHTt2YPXq1bCzs6vzSWuuDNxjZYCoAYhw8DR1CFRPy0oKTB2C4dk7G7T7qoM/yNaXRcBzsvVlKJJSlr/+9a/4/fff4ebmhu7du6N3795aW23UajWcnJy0NiYCREREDyQkJMDb2xu2trbw8/PD/v37H7lvSkoKBg0ahBYtWsDJyQmBgYHYuXNnnc4nac7AxIkTkZWVhVdeeYUTCImIqPEx4cqBGzduxLRp05CQkIDg4GAsX74cQ4YMwalTp9CmTZtq++/btw+DBg3CJ598AhcXFyQlJeG5557DoUOH0KtXL73OKWmYwMHBATt37sRTTz1V10MfrfSmfH0RkWQcJjB/HCaov6qft8vW1/0ez1YfGlerH1kR79u3L3r3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",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(np.abs(df.corr())>0.5,cmap='Reds')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e44f8d24-c851-4fcc-9bfb-930619a38e55",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_bill</th>\n",
       "      <th>tip</th>\n",
       "      <th>sex</th>\n",
       "      <th>smoker</th>\n",
       "      <th>day</th>\n",
       "      <th>time</th>\n",
       "      <th>size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>244.000000</td>\n",
       "      <td>244.000000</td>\n",
       "      <td>244.000000</td>\n",
       "      <td>244.000000</td>\n",
       "      <td>244.000000</td>\n",
       "      <td>244.000000</td>\n",
       "      <td>244.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>19.785943</td>\n",
       "      <td>2.998279</td>\n",
       "      <td>0.643443</td>\n",
       "      <td>0.381148</td>\n",
       "      <td>1.741803</td>\n",
       "      <td>0.278689</td>\n",
       "      <td>2.569672</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>8.902412</td>\n",
       "      <td>1.383638</td>\n",
       "      <td>0.479967</td>\n",
       "      <td>0.486667</td>\n",
       "      <td>0.926815</td>\n",
       "      <td>0.449276</td>\n",
       "      <td>0.951100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>3.070000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>13.347500</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>17.795000</td>\n",
       "      <td>2.900000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>24.127500</td>\n",
       "      <td>3.562500</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>50.810000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       total_bill         tip         sex      smoker         day        time  \\\n",
       "count  244.000000  244.000000  244.000000  244.000000  244.000000  244.000000   \n",
       "mean    19.785943    2.998279    0.643443    0.381148    1.741803    0.278689   \n",
       "std      8.902412    1.383638    0.479967    0.486667    0.926815    0.449276   \n",
       "min      3.070000    1.000000    0.000000    0.000000    0.000000    0.000000   \n",
       "25%     13.347500    2.000000    0.000000    0.000000    1.000000    0.000000   \n",
       "50%     17.795000    2.900000    1.000000    0.000000    2.000000    0.000000   \n",
       "75%     24.127500    3.562500    1.000000    1.000000    3.000000    1.000000   \n",
       "max     50.810000   10.000000    1.000000    1.000000    3.000000    1.000000   \n",
       "\n",
       "             size  \n",
       "count  244.000000  \n",
       "mean     2.569672  \n",
       "std      0.951100  \n",
       "min      1.000000  \n",
       "25%      2.000000  \n",
       "50%      2.000000  \n",
       "75%      3.000000  \n",
       "max      6.000000  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "4b61e671-85fc-4a4f-acb0-8d992852c8c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "sc=StandardScaler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "b402ecb9-1faf-4f24-8acd-50e80fdc9df3",
   "metadata": {},
   "outputs": [],
   "source": [
    "sc_array=sc.fit_transform(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "183dcd32-9f8e-4cab-ad18-844b1a305469",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(244, 7)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sc_array.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "bb6e13ec-5ae8-4104-b5b0-5dd9a843819a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_bill</th>\n",
       "      <th>tip</th>\n",
       "      <th>sex</th>\n",
       "      <th>smoker</th>\n",
       "      <th>day</th>\n",
       "      <th>time</th>\n",
       "      <th>size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.314711</td>\n",
       "      <td>-1.439947</td>\n",
       "      <td>-1.343353</td>\n",
       "      <td>-0.784789</td>\n",
       "      <td>0.279158</td>\n",
       "      <td>-0.621582</td>\n",
       "      <td>-0.600193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-1.063235</td>\n",
       "      <td>-0.969205</td>\n",
       "      <td>0.744406</td>\n",
       "      <td>-0.784789</td>\n",
       "      <td>0.279158</td>\n",
       "      <td>-0.621582</td>\n",
       "      <td>0.453383</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.137780</td>\n",
       "      <td>0.363356</td>\n",
       "      <td>0.744406</td>\n",
       "      <td>-0.784789</td>\n",
       "      <td>0.279158</td>\n",
       "      <td>-0.621582</td>\n",
       "      <td>0.453383</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   total_bill       tip       sex    smoker       day      time      size\n",
       "0   -0.314711 -1.439947 -1.343353 -0.784789  0.279158 -0.621582 -0.600193\n",
       "1   -1.063235 -0.969205  0.744406 -0.784789  0.279158 -0.621582  0.453383\n",
       "2    0.137780  0.363356  0.744406 -0.784789  0.279158 -0.621582  0.453383"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sc_df=pd.DataFrame(sc_array,columns=df.columns)\n",
    "sc_df.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "025306d4-ffa0-483a-abe6-4167b05513e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.round(sc"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
